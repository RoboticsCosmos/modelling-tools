extern "C"
{
#include "kelo_motion_control/EthercatCommunication.h"
#include "kelo_motion_control/KeloMotionControl.h"
#include "kelo_motion_control/mediator.h"
}
#include <array>
#include <controllers/pid_controller.hpp>
#include <filesystem>
#include <iostream>
#include <kinova_mediator/mediator.hpp>
#include <motion_spec_utils/math_utils.hpp>
#include <motion_spec_utils/solver_utils.hpp>
#include <motion_spec_utils/utils.hpp>
#include <string>
#include <chrono>

int main()
{
  Manipulator<kinova_mediator> kinova_right;
  kinova_right.base_frame = "kinova_right_base_link";
  kinova_right.tool_frame = "kinova_right_bracelet_link";
  kinova_right.mediator = new kinova_mediator();
  kinova_right.state = new ManipulatorState();

  Manipulator<kinova_mediator> kinova_left;
  kinova_left.base_frame = "kinova_left_base_link";
  kinova_left.tool_frame = "kinova_left_bracelet_link";
  kinova_left.mediator = new kinova_mediator();
  kinova_left.state = new ManipulatorState();

  KeloBaseConfig kelo_base_config;
  kelo_base_config.nWheels = 4;
  kelo_base_config.index_to_EtherCAT = new int[4]{6, 7, 3, 4};
  kelo_base_config.radius = 0.052;
  kelo_base_config.castor_offset = 0.01;
  kelo_base_config.half_wheel_distance = 0.0275;
  kelo_base_config.wheel_coordinates =
      new double[8]{0.175, 0.1605,
                   -0.175, 0.1605,
                   -0.175, -0.1605,
                    0.175, -0.1605};
  kelo_base_config.pivot_angles_deviation = new double[4]{5.310, 5.533, 1.563, 1.625};

  MobileBase<Robile> freddy_base;
  Robile robile;
  robile.ethercat_config = new EthercatConfig();
  robile.kelo_base_config = &kelo_base_config;

  freddy_base.mediator = &robile;
  freddy_base.state = new MobileBaseState();

  // get current file path
  std::filesystem::path path = __FILE__;

  std::string robot_urdf =
      (path.parent_path().parent_path() / "urdf" / "freddy.urdf").string();

  Freddy freddy = {&kinova_left, &kinova_right, &freddy_base};

  char *interface = "eno1";
  initialize_robot(robot_urdf, interface, &freddy);

  // initialize variables
  double achd_solver_kinova_left_output_torques[7]{};
  double kinova_left_bracelet_table_contact_force_lin_z_vector_z[6] = {0, 0, 1};
  double kinova_right_bracelet_base_lin_vel_x_pid_controller_error_sum;
  double kinova_left_bracelet_base_lin_vel_y_pid_controller_time_step = 1;
  double kinova_right_bracelet_base_lin_vel_y_pid_controller_signal = 0.0;
  double *achd_solver_kinova_left_alpha[2] = {
      new double[6]{0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      new double[6]{0.0, 1.0, 0.0, 0.0, 0.0, 0.0}};
  double kinova_right_bracelet_table_contact_force_pid_controller_error_sum;
  int achd_solver_fext_kinova_right_nj = 7;
  double kinova_right_bracelet_base_distance_impedance_controller_signal = 0.0;
  double kinova_left_bracelet_table_contact_force_pid_controller_kp = 1.0;
  double kinova_right_bracelet_base_vel_vector_lin_x[6] = {0, 0, 1, 0, 0, 0};
  double kinova_left_bracelet_table_contact_force_pid_controller_ki = 0.0;
  double fd_solver_robile_root_acceleration[6] = {0.0, 0.0, 9.81, 0.0, 0.0, 0.0};
  double arm_bracelet_link_lin_xy_vel_reference_value = 0.0;
  std::string base_link = "base_link";
  double kinova_left_bracelet_table_contact_force_pid_controller_kd = 0.0;
  double kinova_left_bracelet_base_lin_vel_x_pid_controller_error_sum;
  double kinova_right_bracelet_base_distance;
  double achd_solver_fext_kinova_left_output_external_wrench[6]{};
  int achd_solver_fext_kinova_right_ns = 8;
  double kinova_right_bracelet_base_lin_vel_x_pid_controller_time_step = 1;
  double kinova_right_bracelet_table_contact_force_pid_controller_signal = 0.0;
  double kinova_right_bracelet_base_lin_vel_x_pid_controller_kd = 0.0;
  double achd_solver_kinova_right_predicted_accelerations[7]{};
  double kinova_right_bracelet_base_lin_vel_y_pid_controller_time_step = 1;
  double kinova_right_bracelet_base_lin_vel_x_pid_controller_ki = 0.9;
  double kinova_left_bracelet_base_lin_vel_x_pid_controller_time_step = 1;
  double kinova_left_bracelet_table_contact_force_embed_map_vector[6] = {0.0, 0.0, 1.0,
                                                                         0.0, 0.0, 0.0};
  double kinova_left_bracelet_base_lin_vel_y_pid_controller_error_sum;
  double kinova_right_bracelet_base_lin_vel_x_pid_controller_kp = 20.0;
  double kinova_left_bracelet_base_lin_vel_y_pid_controller_kp = 20.0;
  double kinova_left_bracelet_base_distance;
  double kinova_left_bracelet_base_distance_impedance_controller_signal = 0.0;
  double kinova_left_bracelet_table_contact_force_pid_controller_time_step = 1;
  int achd_solver_fext_kinova_left_nj = 7;
  double achd_solver_fext_kinova_right_root_acceleration[6] = {0.0, 0.0, 9.81,
                                                               0.0, 0.0, 0.0};
  double kinova_left_bracelet_base_lin_vel_y_pid_controller_signal = 0.0;
  double kinova_left_bracelet_base_lin_vel_y_embed_map_vector[6] = {0.0, 1.0, 0.0,
                                                                    0.0, 0.0, 0.0};
  double kinova_right_bracelet_base_lin_vel_x_pid_controller_prev_error;
  double achd_solver_kinova_left_predicted_accelerations[7]{};
  double kinova_right_bracelet_base_lin_vel_x_embed_map_vector[6] = {1.0, 0.0, 0.0,
                                                                     0.0, 0.0, 0.0};
  double kinova_right_bracelet_base_lin_vel_y_pid_controller_kp = 20.0;
  double kinova_right_bracelet_base_lin_vel_y_pid_controller_ki = 0.9;
  double kinova_right_bracelet_table_contact_force_lin_z;
  double achd_solver_kinova_left_feed_forward_torques[7]{};
  double kinova_right_bracelet_base_lin_vel_y_pid_controller_prev_error;
  double kinova_right_bracelet_table_contact_force_lin_z_vector_z[6] = {0, 0, 1};
  double kinova_left_bracelet_table_contact_force_pid_controller_error_sum;
  std::string table = "table";
  double kinova_left_bracelet_base_lin_vel_y_pid_controller_prev_error;
  double kinova_right_bracelet_base_lin_vel_y_pid_controller_kd = 0.0;
  std::string kinova_right_base_link = "kinova_right_base_link";
  double kinova_left_bracelet_base_distance_embed_map_vector[3] = {1.0, 1.0, 1.0};
  double achd_solver_kinova_right_root_acceleration[6] = {-9.685, -1.033, 1.324, 0.0, 0.0, 0.0};
  double kinova_left_bracelet_base_distance_impedance_controller_stiffness_diag_mat[1] = {
      10.0};
  double kinova_left_bracelet_base_lin_vel_x_pid_controller_prev_error;
  double kinova_right_bracelet_base_distance_embed_map_vector[3] = {1.0, 1.0, 1.0};
  std::string kinova_left_bracelet_link = "kinova_left_bracelet_link";
  double achd_solver_fext_kinova_right_output_torques[7]{};
  double kinova_left_bracelet_base_lin_vel_y_pid_controller_ki = 0.9;
  int achd_solver_fext_kinova_left_ns = 8;
  double kinova_left_bracelet_base_lin_vel_y_pid_controller_kd = 0.0;
  double kinova_left_bracelet_base_lin_vel_x_twist_embed_map_vector[6] = {0.0, 0.0, 1.0,
                                                                          0.0, 0.0, 0.0};
  int achd_solver_kinova_right_ns = 8;
  double kinova_right_bracelet_table_contact_force_pid_controller_kp = 1.0;
  int achd_solver_kinova_right_nj = 7;
  double kinova_right_bracelet_table_contact_force_pid_controller_ki = 0.0;
  double kinova_right_bracelet_table_contact_force_pid_controller_kd = 0.0;
  int achd_solver_kinova_right_nc = 2;
  double arms_distance_reference_value = 0.75;
  double kinova_right_bracelet_table_contact_force_embed_map_vector[6] = {0.0, 0.0, 1.0,
                                                                          0.0, 0.0, 0.0};
  double achd_solver_kinova_right_output_torques[7]{};
  int achd_solver_kinova_left_nc = 2;
  std::string kinova_left_base_link = "kinova_left_base_link";
  double achd_solver_kinova_right_output_acceleration_energy[6]{};
  int achd_solver_kinova_left_nj = 7;
  std::string kinova_right_bracelet_link = "kinova_right_bracelet_link";
  double kinova_right_bracelet_base_lin_vel_y_pid_controller_error_sum;
  double kinova_right_bracelet_table_contact_force_pid_controller_prev_error;
  int achd_solver_kinova_left_ns = 8;
  double achd_solver_fext_kinova_right_output_external_wrench[6]{};
  double kinova_left_bracelet_table_contact_force_pid_controller_signal = 0.0;
  double kinova_left_bracelet_table_contact_force_lin_z;
  double kinova_right_bracelet_base_lin_vel_y_twist_embed_map_vector[6] = {0.0, 1.0, 0.0,
                                                                           0.0, 0.0, 0.0};
  double arm_table_contact_force_reference_value = -10.0;
  double *achd_solver_kinova_right_alpha[2] = {
      new double[6]{0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      new double[6]{0.0, 1.0, 0.0, 0.0, 0.0, 0.0}};
  double fd_solver_robile_output_external_wrench[6]{};
  double fd_solver_robile_output_external_wrench2[6]{};
  double kinova_left_bracelet_base_lin_vel_x_pid_controller_kp = 20.0;
  double achd_solver_kinova_left_root_acceleration[6] = {-9.6, 0.895, 1.358, 0.0, 0.0, 0.0};
  double kinova_left_bracelet_base_lin_vel_x_pid_controller_signal = 0.0;
  double kinova_right_bracelet_base_distance_impedance_controller_stiffness_diag_mat[1] =
      {10.0};
  double kinova_left_bracelet_base_lin_vel_x_pid_controller_ki = 0.9;
  double kinova_left_bracelet_table_contact_force_pid_controller_prev_error;
  double kinova_right_bracelet_base_vel_vector_lin_y[6] = {0, 1, 0, 0, 0, 0};
  double achd_solver_fext_kinova_left_root_acceleration[6] = {0.0, 0.0, 9.81,
                                                              0.0, 0.0, 0.0};
  double achd_solver_kinova_left_output_acceleration_energy[6]{};
  double kinova_left_bracelet_base_lin_vel_x_pid_controller_kd = 0.0;
  double of_vel_qname_lin_x;
  double of_vel_qname_lin_y;
  double achd_solver_fext_kinova_left_output_torques[7]{};
  double achd_solver_kinova_right_feed_forward_torques[7]{};
  double fd_solver_robile_output_torques[8]{};
  double kinova_right_bracelet_base_lin_vel_x_pid_controller_signal = 0.0;
  double kinova_left_bracelet_base_vel_vector_lin_x[6] = {0, 0, 1, 0, 0, 0};
  double kinova_right_bracelet_table_contact_force_pid_controller_time_step = 1;
  double kinova_left_bracelet_base_vel_vector_lin_y[6] = {0, 1, 0, 0, 0, 0};

  int count = 0;
  std::cout << std::endl;

  bool kinova_left_first_time = true;

  const double desired_frequency = 900.0; // Hz
  const auto desired_period = std::chrono::duration<double>(1.0 / desired_frequency); // s

  while (true)
  {
    auto start_time = std::chrono::high_resolution_clock::now();

    count++;
    std::cout << "count: " << count << std::endl;
    // Get the robot structs with the data from robots
    get_robot_data(&freddy);
    // print_robot_data(&freddy);
    // std::cout << std::endl;

    // controllers
    // pid controller
    // printf("second controller\n");
    getLinkVelocity(kinova_left_bracelet_link, base_link, base_link,
                    kinova_left_bracelet_base_vel_vector_lin_y, &freddy,
                    of_vel_qname_lin_y);
    // printf("of_vel_qname_lin_y: %f\n", of_vel_qname_lin_y);
    double kinova_left_bracelet_base_lin_vel_y_pid_controller_error = 0;
    computeEqualityError(of_vel_qname_lin_y, arm_bracelet_link_lin_xy_vel_reference_value,
                         kinova_left_bracelet_base_lin_vel_y_pid_controller_error);
    // printf("kinova_left_bracelet_base_lin_vel_y_pid_controller_error: %f\n",
    //        kinova_left_bracelet_base_lin_vel_y_pid_controller_error);
    pidController(kinova_left_bracelet_base_lin_vel_y_pid_controller_error,
                  kinova_left_bracelet_base_lin_vel_y_pid_controller_kp,
                  kinova_left_bracelet_base_lin_vel_y_pid_controller_ki,
                  kinova_left_bracelet_base_lin_vel_y_pid_controller_kd,
                  kinova_left_bracelet_base_lin_vel_y_pid_controller_time_step,
                  kinova_left_bracelet_base_lin_vel_y_pid_controller_error_sum,
                  kinova_left_bracelet_base_lin_vel_y_pid_controller_prev_error,
                  kinova_left_bracelet_base_lin_vel_y_pid_controller_signal);
    // printf("kinova_left_bracelet_base_lin_vel_y_pid_controller_signal: %f\n",
    //        kinova_left_bracelet_base_lin_vel_y_pid_controller_signal);
    // printf("\n");

    // pid controller
    // printf("fourth controller\n");
    getLinkVelocity(kinova_right_bracelet_link, base_link, base_link,
                    kinova_right_bracelet_base_vel_vector_lin_x, &freddy,
                    of_vel_qname_lin_x);
    // printf("of_vel_qname_lin_x: %f\n", of_vel_qname_lin_x);
    double kinova_right_bracelet_base_lin_vel_x_pid_controller_error = 0;
    computeEqualityError(of_vel_qname_lin_x, arm_bracelet_link_lin_xy_vel_reference_value,
                         kinova_right_bracelet_base_lin_vel_x_pid_controller_error);
    // printf("kinova_right_bracelet_base_lin_vel_x_pid_controller_error: %f\n",
    //        kinova_right_bracelet_base_lin_vel_x_pid_controller_error);
    pidController(kinova_right_bracelet_base_lin_vel_x_pid_controller_error,
                  kinova_right_bracelet_base_lin_vel_x_pid_controller_kp,
                  kinova_right_bracelet_base_lin_vel_x_pid_controller_ki,
                  kinova_right_bracelet_base_lin_vel_x_pid_controller_kd,
                  kinova_right_bracelet_base_lin_vel_x_pid_controller_time_step,
                  kinova_right_bracelet_base_lin_vel_x_pid_controller_error_sum,
                  kinova_right_bracelet_base_lin_vel_x_pid_controller_prev_error,
                  kinova_right_bracelet_base_lin_vel_x_pid_controller_signal);
    // printf("kinova_right_bracelet_base_lin_vel_x_pid_controller_signal: %f\n",
    //        kinova_right_bracelet_base_lin_vel_x_pid_controller_signal);
    // printf("\n");

    // pid controller
    // printf("fifth controller\n");
    getLinkVelocity(kinova_right_bracelet_link, base_link, base_link,
                    kinova_right_bracelet_base_vel_vector_lin_y, &freddy,
                    of_vel_qname_lin_y);
    // printf("of_vel_qname_lin_y: %f\n", of_vel_qname_lin_y);
    double kinova_right_bracelet_base_lin_vel_y_pid_controller_error = 0;
    computeEqualityError(of_vel_qname_lin_y, arm_bracelet_link_lin_xy_vel_reference_value,
                         kinova_right_bracelet_base_lin_vel_y_pid_controller_error);
    // printf("kinova_right_bracelet_base_lin_vel_y_pid_controller_error: %f\n",
    //        kinova_right_bracelet_base_lin_vel_y_pid_controller_error);
    pidController(kinova_right_bracelet_base_lin_vel_y_pid_controller_error,
                  kinova_right_bracelet_base_lin_vel_y_pid_controller_kp,
                  kinova_right_bracelet_base_lin_vel_y_pid_controller_ki,
                  kinova_right_bracelet_base_lin_vel_y_pid_controller_kd,
                  kinova_right_bracelet_base_lin_vel_y_pid_controller_time_step,
                  kinova_right_bracelet_base_lin_vel_y_pid_controller_error_sum,
                  kinova_right_bracelet_base_lin_vel_y_pid_controller_prev_error,
                  kinova_right_bracelet_base_lin_vel_y_pid_controller_signal);
    // printf("kinova_right_bracelet_base_lin_vel_y_pid_controller_signal: %f\n",
    //        kinova_right_bracelet_base_lin_vel_y_pid_controller_signal);
    // printf("\n");

    // pid controller
    // printf("eighth controller\n");
    getLinkVelocity(kinova_left_bracelet_link, base_link, base_link,
                    kinova_left_bracelet_base_vel_vector_lin_x, &freddy,
                    of_vel_qname_lin_x);
    // printf("of_vel_qname_lin_x: %f\n", of_vel_qname_lin_x);
    double kinova_left_bracelet_base_lin_vel_x_pid_controller_error = 0;
    computeEqualityError(of_vel_qname_lin_x, arm_bracelet_link_lin_xy_vel_reference_value,
                         kinova_left_bracelet_base_lin_vel_x_pid_controller_error);
    // printf("kinova_left_bracelet_base_lin_vel_x_pid_controller_error: %f\n",
    //        kinova_left_bracelet_base_lin_vel_x_pid_controller_error);
    pidController(kinova_left_bracelet_base_lin_vel_x_pid_controller_error,
                  kinova_left_bracelet_base_lin_vel_x_pid_controller_kp,
                  kinova_left_bracelet_base_lin_vel_x_pid_controller_ki,
                  kinova_left_bracelet_base_lin_vel_x_pid_controller_kd,
                  kinova_left_bracelet_base_lin_vel_x_pid_controller_time_step,
                  kinova_left_bracelet_base_lin_vel_x_pid_controller_error_sum,
                  kinova_left_bracelet_base_lin_vel_x_pid_controller_prev_error,
                  kinova_left_bracelet_base_lin_vel_x_pid_controller_signal);
    // printf("kinova_left_bracelet_base_lin_vel_x_pid_controller_signal: %f\n",
    //        kinova_left_bracelet_base_lin_vel_x_pid_controller_signal);
    // printf("\n");

    // embed maps
    // printf("embed maps\n");
    for (size_t i = 0;
         i < sizeof(kinova_right_bracelet_base_lin_vel_x_embed_map_vector) /
                 sizeof(kinova_right_bracelet_base_lin_vel_x_embed_map_vector[0]);
         i++)
    {
      if (kinova_right_bracelet_base_lin_vel_x_embed_map_vector[i] != 0.0)
      {
        achd_solver_kinova_right_output_acceleration_energy[i] +=
            kinova_right_bracelet_base_lin_vel_x_pid_controller_signal;
      }
    }
    for (size_t i = 0;
         i < sizeof(kinova_right_bracelet_base_lin_vel_y_twist_embed_map_vector) /
                 sizeof(kinova_right_bracelet_base_lin_vel_y_twist_embed_map_vector[0]);
         i++)
    {
      if (kinova_right_bracelet_base_lin_vel_y_twist_embed_map_vector[i] != 0.0)
      {
        achd_solver_kinova_right_output_acceleration_energy[i] +=
            kinova_right_bracelet_base_lin_vel_y_pid_controller_signal;
      }
    }
    for (size_t i = 0;
         i < sizeof(kinova_left_bracelet_base_lin_vel_x_twist_embed_map_vector) /
                 sizeof(kinova_left_bracelet_base_lin_vel_x_twist_embed_map_vector[0]);
         i++)
    {
      if (kinova_left_bracelet_base_lin_vel_x_twist_embed_map_vector[i] != 0.0)
      {
        achd_solver_kinova_left_output_acceleration_energy[i] +=
            kinova_left_bracelet_base_lin_vel_x_pid_controller_signal;
      }
    }
    for (size_t i = 0;
         i < sizeof(kinova_left_bracelet_base_lin_vel_y_embed_map_vector) /
                 sizeof(kinova_left_bracelet_base_lin_vel_y_embed_map_vector[0]);
         i++)
    {
      if (kinova_left_bracelet_base_lin_vel_y_embed_map_vector[i] != 0.0)
      {
        achd_solver_kinova_left_output_acceleration_energy[i] +=
            kinova_left_bracelet_base_lin_vel_y_pid_controller_signal;
      }
    }

    // solvers
    // printf("solvers\n");

    // achd_solver
    // printf("first solver\n");
    double achd_solver_kinova_right_beta[6]{};
    add(achd_solver_kinova_right_output_acceleration_energy,
        achd_solver_kinova_right_beta, achd_solver_kinova_right_beta, 6);
    // printf("beta: ");
    // for (size_t i = 0; i < 6; i++)
    // {
    //   std::cout << achd_solver_kinova_right_beta[i] << " ";
    // }
    // std::cout << std::endl;
    double *achd_solver_kinova_right_alpha_transf[2] = {new double[6]{}, new double[6]{}};
    double achd_solver_kinova_right_beta_transf[6]{};
    transform_alpha_beta(
        &freddy, base_link, kinova_right_base_link, achd_solver_kinova_right_alpha,
        achd_solver_kinova_right_beta, achd_solver_kinova_right_nc,
        achd_solver_kinova_right_alpha_transf, achd_solver_kinova_right_beta_transf);
    // printf("right beta transf: ");
    // for (size_t i = 0; i < 6; i++)
    // {
    //   std::cout << achd_solver_kinova_right_beta_transf[i] << " ";
    // }
    // std::cout << std::endl;
    for (size_t i = 0; i < 6; i++)
    {
      achd_solver_kinova_right_beta_transf[i] += -achd_solver_kinova_right_root_acceleration[i];
    }
    // TODO: transform root_acc before passing it to the solver
    achd_solver(&freddy, kinova_right_base_link, kinova_right_bracelet_link,
                achd_solver_kinova_right_nc, achd_solver_kinova_right_root_acceleration,
                achd_solver_kinova_right_alpha_transf,
                achd_solver_kinova_right_beta_transf,
                achd_solver_kinova_right_feed_forward_torques,
                achd_solver_kinova_right_predicted_accelerations,
                achd_solver_kinova_right_output_torques);
    // printf("right output torques: ");
    // for (size_t i = 0; i < 7; i++)
    // {
    //   std::cout << achd_solver_kinova_right_output_torques[i] << " ";
    // }
    // std::cout << std::endl;
    // std::cout << std::endl;

    // achd_solver
    // printf("fourth solver\n");
    double achd_solver_kinova_left_beta[6]{};
    add(achd_solver_kinova_left_output_acceleration_energy,
    achd_solver_kinova_left_beta,
        achd_solver_kinova_left_beta, 6);
    double *achd_solver_kinova_left_alpha_transf[2] = {new double[6]{}, new double[6]{}};
    double achd_solver_kinova_left_beta_transf[6]{};
    transform_alpha_beta(&freddy, base_link, kinova_left_base_link,
                         achd_solver_kinova_left_alpha, achd_solver_kinova_left_beta,
                         achd_solver_kinova_left_nc, achd_solver_kinova_left_alpha_transf,
                         achd_solver_kinova_left_beta_transf);
    // printf("beta trans: ");
    // for (size_t i = 0; i < 6; i++)
    // {
    //   std::cout << achd_solver_kinova_left_beta[i] << " ";
    // }
    // std::cout << std::endl;
    for (size_t i = 0; i < 6; i++)
    {
      achd_solver_kinova_left_beta_transf[i] += -achd_solver_kinova_left_root_acceleration[i];
    }
    achd_solver(&freddy, kinova_left_base_link, kinova_left_bracelet_link,
                achd_solver_kinova_left_nc, achd_solver_kinova_left_root_acceleration,
                achd_solver_kinova_left_alpha_transf, achd_solver_kinova_left_beta_transf,
                achd_solver_kinova_left_feed_forward_torques,
                achd_solver_kinova_left_predicted_accelerations,
                achd_solver_kinova_left_output_torques);
    // printf("left output torques: ");
    // for (size_t i = 0; i < 7; i++)
    // {
    //   std::cout << achd_solver_kinova_left_output_torques[i] << " ";
    // }
    // std::cout << std::endl;

    // Command the torques to the robots
    double kinova_right_cmd_tau[7]{};
    add(achd_solver_kinova_right_output_torques, kinova_right_cmd_tau,
        kinova_right_cmd_tau, 7);
    // add(achd_solver_fext_kinova_right_output_torques, kinova_right_cmd_tau,
    //     kinova_right_cmd_tau, 7);
    // set_manipulator_torques(&freddy, kinova_right_base_link, kinova_right_bracelet_link,
    //                         kinova_right_cmd_tau);
    double kinova_left_cmd_tau[7]{};
    add(achd_solver_kinova_left_output_torques, kinova_left_cmd_tau, kinova_left_cmd_tau,
        7);
    // add(achd_solver_fext_kinova_left_output_torques, kinova_left_cmd_tau,
    //     kinova_left_cmd_tau, 7);
    if (kinova_left_first_time)
    {
      freddy.kinova_left->mediator->set_control_mode(2);
      kinova_left_first_time = false;
    }
    set_manipulator_torques(&freddy, kinova_left_base_link, kinova_left_bracelet_link,
                            kinova_left_cmd_tau);
    // double freddy_base_cmd_tau[8]{};
    // add(fd_solver_robile_output_torques, freddy_base_cmd_tau, freddy_base_cmd_tau, 8);
    // set_mobile_base_torques(&freddy, freddy_base_cmd_tau);

    // std::cout << "end of loop\n";
    // Command the torques to the robots

    auto end_time = std::chrono::high_resolution_clock::now();
    auto elapsed_time = std::chrono::duration<double>(end_time - start_time);

    // if the elapsed time is less than the desired period, busy wait
    while (elapsed_time < desired_period)
    {
      end_time = std::chrono::high_resolution_clock::now();
      elapsed_time = std::chrono::duration<double>(end_time - start_time);
    }
  }

  free_robot_data(&freddy);

  return 0;
}