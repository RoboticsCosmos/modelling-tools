kdl_init() ::= <<
// get current file path
std::filesystem::path path = __FILE__;

// get the robot urdf path
std::string robot_urdf =
    (path.parent_path().parent_path() / "urdf" / "freddy.urdf").string();

char *ethernet_interface = "eno1";
initialize_robot(robot_urdf, ethernet_interface, &robot);
>>

kdl_init_sim() ::= <<
// get current file path
std::filesystem::path path = __FILE__;

// get the robot urdf path
std::string robot_urdf =
    (path.parent_path().parent_path() / "urdf" / "freddy.urdf").string();

initialize_robot_sim(robot_urdf, &robot);
>>

init_Manipulator_struct(robot) ::= <<
initialize_manipulator_state(<robot>_chain.getNrOfJoints(), <robot>_chain.getNrOfSegments(), &<robot>_state);
>>

computeForwardVelocityKinematics(measured, data) ::= <<
getLinkVelocity(<measured.of.entity>, <measured.asb>, <measured.wrt>, <measured.of.vector>, &robot, <measured.of.id>);
>>

computeForce(measured, data) ::= <<
computeForce(<measured.of.applied_by_entity>, <measured.of.applied_to_entity>, <measured.asb>, <measured.of.vector>, &robot, <measured.of.id>);
>>

computeDistance(measured, data) ::= <<
computeDistance(new std::string[2]{ <measured.of.entities: {ent | <ent>}; separator=", "> }, <measured.asb>, &robot, <measured.of.id>);
>>

computeDistance1D(measured, data) ::= <<
computeDistance1D(new std::string[2]{ <measured.of.entities: {ent | <ent>}; separator=", "> }, <measured.of.axis>, <measured.asb>, &robot, <measured.of.id>);
>>