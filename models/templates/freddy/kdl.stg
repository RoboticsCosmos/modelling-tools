kdl_init() ::= <<
// get current file path
std::filesystem::path path = __FILE__;

// get the robot urdf path
std::string robot_urdf =
    (path.parent_path().parent_path() / "urdf" / "freddy.urdf").string();

// set the base and tool links
std::string base_link1 = "base_link";
std::string tool_link_1 = "kinova_left_bracelet_link";
std::string tool_link_2 = "kinova_right_bracelet_link";

// initialize the chain
KDL::Chain kinova_left_chain;
initialize_robot_chain(robot_urdf, base_link1, tool_link_1, kinova_left_chain);

KDL::Chain kinova_right_chain;
initialize_robot_chain(robot_urdf, base_link1, tool_link_2, kinova_right_chain);
>>

init_Manipulator_struct(robot) ::= <<
initialize_manipulator_state(<robot>_chain.getNrOfJoints(), <robot>_chain.getNrOfSegments(), &<robot>_state);
>>

computeForwardVelocityKinematics(measured, data) ::= <<
computeForwardVelocityKinematics(<measured.of.entity>, <measured.asb>, <measured.wrt>, <measured.of.vector>, &<data.robot>_state, &<data.robot>_chain, <measured.of.id>);
>>

computeForce(measured, data) ::= <<
computeForce(<measured.of.applied_by_entity>, <measured.of.applied_to_entity>, <measured.asb>, <measured.of.vector>, &<data.robot>_state, &<data.robot>_chain, <measured.of.id>);
>>

computeDistance(measured, data) ::= <<
computeDistance(new std::string[2]{ <measured.of.entities: {ent | <ent>}; separator=", "> }, <measured.asb>, &<data.robot>_state, &<data.robot>_chain, <measured.of.id>);
>>