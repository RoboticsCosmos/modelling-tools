import "kdl.stg"
import "robots.stg"
import "../common/includes.stg"
import "../common/controllers.stg"
import "../common/data_types.stg"
import "../common/embed_maps.stg"
import "../common/solvers.stg"

application(variables, d) ::= <<
<cpp_include()>
<controller_include()>
<motion_spec_utils_include()>
<robot_mediators_include()>
#include <csignal>

volatile sig_atomic_t flag = 0;

void handle_signal(int sig)
{
  flag = 1;
  std::cout << "Received signal: " << sig << std::endl;
}

int main()
{
  // handle signals
  struct sigaction sa;
  sa.sa_handler = handle_signal;
  sigemptyset(&sa.sa_mask);
  sa.sa_flags = 0;

  for (int i = 1; i < NSIG; ++i)
  {
    if (sigaction(i, &sa, NULL) == -1)
    {
      perror("sigaction");
    }
  }
  
  <! init robot data structure !>
  <init_robots(d.robots)>

  <! kdl init !>
  <kdl_init_sim()>

  // initialize variables
  <! variables !>
  <variables: {v | <variables_init(v, variables.(v))> }; separator="\n">

  set_init_sim_data(&robot);

  while (true) {
    <! update robot state !>
    get_robot_data_sim(&robot);

    // controllers
    <! controllers !>
    <d.controllers: {v | <({<d.controllers.(v).name>})(v, d.controllers.(v))>}; separator="\n">

    // embed maps
    <! embed maps !>
    <d.embed_maps: {m | <embed_maps(d.embed_maps.(m))> }; separator="\n">

    // solvers
    <! solvers !>
    <d.solvers: {s | <({<d.solvers.(s).name>})(s, d.solvers.(s))> }; separator="\n">
  }

  free_robot_data(&robot);

  return 0;
}
>>