init_robots(robots_data) ::= <<
// Initialize the robot structs
<robots_data: {robot | <({init_<robots_data.(robot).type>})(robot, robots_data.(robot))>}; separator="\n">

Freddy robot = { <robots_data: {rob | &<rob>}; separator=","> };
>>

init_Manipulator(robot, robot_data) ::= <<
<robot_data.type>\<kinova_mediator> <robot>;
<robot>.base_frame = "<robot_data.kinematic_chain_start>";
<robot>.tool_frame = "<robot_data.kinematic_chain_end>";
<robot>.mediator = new kinova_mediator();
<robot>.state = new <robot_data.type>State();
bool <robot>_torque_control_mode_set = false;

double <robot>_rne_init_taus[7]{};
>>

init_MobileBase(robot, robot_data) ::= <<
KeloBaseConfig kelo_base_config;
kelo_base_config.nWheels = 4;
kelo_base_config.index_to_EtherCAT = new int[4]{6, 7, 3, 4};
kelo_base_config.radius = 0.052;
kelo_base_config.castor_offset = 0.01;
kelo_base_config.half_wheel_distance = 0.0275;
kelo_base_config.wheel_coordinates =
    new double[8]{0.175, 0.1605, -0.175, 0.1605, -0.175, -0.1605, 0.175, -0.1605};
kelo_base_config.pivot_angles_deviation = new double[4]{5.310, 5.533, 1.563, 1.625};

<robot_data.type>\<Robile> <robot>;
Robile robile;
robile.ethercat_config = new EthercatConfig();
robile.kelo_base_config = &kelo_base_config;

<robot>.mediator = &robile;
<robot>.state = new <robot_data.type>State();

>>

compute_initial_robots_torques(robots_data) ::= <<
<robots_data: {robot | <({compute_initial_<robots_data.(robot).type>_torques})(robot, robots_data.(robot))>}; separator="\n">
>>

compute_initial_Manipulator_torques(robot, robot_data) ::= <<
double **<robot>_rne_ext_wrenches = new double*[7];
init_2d_array(<robot>_rne_ext_wrenches, 7, 6);

rne_solver(&robot, <robot>.base_frame, <robot>.tool_frame, <robot>_rne_solver_root_acc, <robot>_rne_ext_wrenches, <robot>_rne_init_taus);
>>

compute_initial_MobileBase_torques(robot, robot_data) ::= <<  
>>

init_robot_connections(robots_data) ::= <<
// Initialize the robot connections
Freddy robot = { <robots_data: {rob | &<rob>}; separator=","> };
>>

init_Manipulator_connections(robot) ::= <<
// Initialize the Manipulator connections
kinova_mediator *<robot>_mediator = new kinova_mediator();
<robot>_mediator->initialize(0, 0, 0.0);
<robot>_mediator->set_control_mode(2);
>>

init_MobileBase_connections(robot) ::= <<
// Initialize the MobileBase connections
KeloBaseConfig <robot>_config;
EthercatConfig <robot>_ethercat_config;
initialize_kelo_base(&<robot>_config, &<robot>_ethercat_config);
int result = 0;
establish_kelo_base_connection(&<robot>_ethercat_config, "eno1", &result);
if (result != 0) {
  printf("Failed to establish connection to KeloBase\n");
  exit(1);
}
>>

get_robots_data(robots_data) ::= <<
// Get the robot structs with the data from robots
<robots_data: {robot | <({get_<robots_data.(robot).type>_data})(robot)>}; separator="\n">
>>

get_Manipulator_data(robot) ::= <<
get_manipulator_data(&<robot>_state, <robot>_mediator);
>>

get_MobileBase_data(robot) ::= <<
get_kelo_base_state(&<robot>_config, &<robot>_ethercat_config, <robot>_state.pivot_angles);
>>

set_robot_command_torques(robots_data) ::= <<
// Command the torques to the robots

<robots_data: {robot | <({command_<robots_data.(robot).type>_torques})(robot, robots_data.(robot))>}; separator="\n">
<robots_data: {robot | <({set_<robots_data.(robot).type>_torques})(robot, robots_data.(robot))>}; separator="\n">
>>

command_Manipulator_torques(robot, robot_data) ::= <<
double <robot>_cmd_tau[7]{};
<robot_data.input_command_torques: {ct | add(<ct>, <robot>_cmd_tau, <robot>_cmd_tau, 7);}; separator="\n">
KDL::JntArray <robot>_cmd_tau_kdl(7);
cap_and_convert_torques(<robot>_cmd_tau, 7, <robot>_cmd_tau_kdl);

>>

set_Manipulator_torques(robot, robot_data) ::= <<
set_manipulator_torques(&robot, <robot_data.kinematic_chain_start>, &<robot>_cmd_tau_kdl);
>>

command_MobileBase_torques(robot, robot_data) ::= <<
double <robot>_cmd_tau[8]{};
<robot_data.input_command_torques: {ct | add(<ct>, <robot>_cmd_tau, <robot>_cmd_tau, 8);}; separator="\n">

>>

set_MobileBase_torques(robot, robot_data) ::= <<
set_kelo_base_torques(&robot, <robot>_cmd_tau);
>>