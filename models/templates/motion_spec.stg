import "includes.stg"
import "data_type.stg"
import "monitors.stg"
import "pid_controller.stg"
import "embed_maps.stg"
import "solvers.stg"


application(variables, state, d) ::= <<

<motion_spec_include()>
<controller_include()>

int main()
{
// initialize variables
<! variables !>
<variables: {v | <variables_init(v, variables.(v))> }; separator="\n">

  // pre monitors
  <! pre condition monitors !>
  <d.monitors.pre: {m | <({<d.monitors.pre.(m).name>})(d.monitors.pre.(m))> }; separator="\n">

  while (true) {

    // controllers
    <! controllers !>
    <d.controllers: {v | <({<d.controllers.(v).name>})(d.controllers.(v))>}; separator="\n">

    // embed maps
    <! embed maps !>
    <d.embed_maps: {m | <embed_maps(d.embed_maps.(m))> }; separator="\n">

    // solvers
    <! solvers !>
    <d.solvers: {s | <({<d.solvers.(s).name>})(d.solvers.(s))> }; separator="\n">

    <! command torques !>
    <({<d.command_torques.name>})(d.command_torques.data)>

    // post monitors
    <! post condition monitors !>
    <d.monitors.post: {m | <({<d.monitors.post.(m).name>})(d.monitors.post.(m))> }; separator="\n">
  }

  return 0;
}

>>

command_torques(cmd_data) ::= <<
// command torques
double command_torques[7];

<cmd_data: {d | add(<d>, command_torques)>}; separator="\n">
>>