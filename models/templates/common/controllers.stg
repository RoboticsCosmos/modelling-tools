pid_controller(data) ::= <<
// pid controller
<({<data.measure_variable>})(data.measured, data)>
double error = 0;
<({compute<data.operator>Error})(data.measured, data.reference_value, "error")>
pidController(error, <data.gains.kp>, <data.gains.ki>, <data.gains.kd>, <data.dt>, <data.error_sum>, <data.last_error>, <data.signal>);

>>

computeEqualError(measured, reference_value, error) ::= <<
computeEqualityError(<measured.of.id>, <reference_value>, <error>);
>>

impedance_controller(data) ::= <<
// impedance controller
double stiffnessError = 0.0;
double dampingError = 0.0;
<if(data.stiffness)><stiffness(data, "stiffnessError")><endif>
<if(data.damping)><damping(data, "dampingError")><endif>
impedanceController(stiffnessError, dampingError, <if(data.stiffness)><data.stiffness.diag_mat><else>{}<endif>, <if(data.damping)><data.damping.diag_mat><else>{}<endif>, <data.signal>);

>>

stiffness(data, error) ::= <<
// stiffness
<({<data.stiffness.measure_variable>})(data.stiffness.measured, data)>
<({compute<data.operator>Error})(data.stiffness.measured, data.stiffness.reference_value, error)>
>>

damping(data, error) ::= <<
// damping TODO: implement
>>