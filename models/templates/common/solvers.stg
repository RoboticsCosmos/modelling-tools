achd_solver(id, data) ::= <<
// achd_solver
double <id>_beta[6]{};
<data.beta: {b | add(<b>, <id>_beta, <id>_beta, 6);}; separator="\n">
double *<data.alpha>_transf[<data.nc>];
for (size_t i = 0; i \< <data.nc>; i++)
{
  <data.alpha>_transf[i] = new double[6]{};
}
transform_alpha(&robot, base_link, <data.root_link>, <data.alpha>, <data.nc>, <data.alpha>_transf);
achd_solver(&robot, <data.root_link>, <data.tip_link>, <data.nc>, <data.root_acceleration>, <data.alpha>_transf, <id>_beta, <data.tau_ff>, <data.predicted_accelerations>, <data.output_torques>);

>>

achd_solver_fext(id, data) ::= <<
// achd_solver_fext
double *<id>_ext_wrenches[7];
for (size_t i = 0; i \< 7; i++)
{
  <id>_ext_wrenches[i] = new double[6]{};
}
int link_id = -1;
<data.ext_wrench: {ew | <handle_external_wrench(id, ew, data)> }; separator="\n">
achd_solver_fext(&robot, <data.root_link>, <data.tip_link>, <id>_ext_wrenches, <data.output_torques>);

>>

handle_external_wrench(id, ew, data) ::= <<
double <ew.wrench>_transf[6]{};
transform_wrench(&robot, <data.root_link>, <data.tip_link>, <ew.link>, <ew.wrench>, <ew.wrench>_transf);
getLinkId(&robot, <data.root_link>, <data.tip_link>, <ew.link>, link_id);
<id>_ext_wrenches[link_id] = <ew.wrench>_transf;
>>

base_fd_solver(id, data) ::= <<
// base_fd_solver
double <id>_platform_force[3]{};
<data.platform_force: {f | add(<f>, <id>_platform_force, <id>_platform_force, 3);}; separator="\n">
base_fd_solver(&<data.robot>_state, <id>_platform_force, <data.output_torques>);

>>