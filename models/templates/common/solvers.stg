achd_solver(id, data) ::= <<
// achd_solver
double <id>_beta[6]{};
for (size_t i = 0; i \< 6; i++)
{
  <id>_beta[i] = <data.root_acceleration>[i];
}
double *<id>_ext_wrench[<data.robot>_state.ns];
for (size_t i = 0; i \< 7; i++)
{
  <id>_ext_wrench[i] = new double[6] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
}
<data.beta: {b | add(<b>, <id>_beta, <id>_beta, 6);}; separator="\n">
achd_solver(&<data.robot>_state, &<data.robot>_chain, <data.nc>, <data.root_acceleration>, <data.alpha>, <id>_beta, <id>_ext_wrench, <data.tau_ff>, <data.predicted_accelerations>, <data.output_torques>);

>>

achd_solver_fext(id, data) ::= <<
// achd_solver_fext
double *<id>_ext_wrench[<data.robot>_state.ns];
for (size_t i = 0; i \< <data.robot>_state.ns - 1; i++)
{
  <id>_ext_wrench[i] = new double[6] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
}
double <id>_ext_wrench_tool[6]{};
<data.ext_wrench: {w | add(<w>, <id>_ext_wrench_tool, <id>_ext_wrench_tool, 6);}; separator="\n">
<id>_ext_wrench[<data.robot>_state.ns - 1] = <id>_ext_wrench_tool;
achd_solver_fext(&<data.robot>_state, &<data.robot>_chain, <id>_ext_wrench, <data.output_torques>);

>>

base_fd_solver(id, data) ::= <<
// base_fd_solver
double <id>_platform_force[3]{};
<data.platform_force: {f | add(<f>, <id>_platform_force, <id>_platform_force, 3);}; separator="\n">
base_fd_solver(&<data.robot>_state, <id>_platform_force, <data.output_torques>);

>>